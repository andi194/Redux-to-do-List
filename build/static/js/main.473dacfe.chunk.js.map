{"version":3,"sources":["actions.js","Add.js","Link.js","LinkContainer.js","Links.js","Item.js","VisibleItems.js","VisibleItemList.js","App.js","serviceWorker.js","reducer.js","index.js"],"names":["VisibilityFilters","nextItemId","Add","input","Card","className","Body","Form","onSubmit","e","text","preventDefault","value","trim","props","dispatch","type","id","ref","node","Button","React","Component","connect","Link","Nav","Item","eventKey","this","children","onClick","disabled","active","LinkContainer","state","ownProps","filter","visibilityFilter","Links","variant","defaultActiveKey","style","textDecoration","completed","description","removeClick","VisibleItems","Table","items","map","item","key","onItemClick","getVisibleItems","t","VisibleItemList","toggleItem","removeItem","App","Navbar","bg","Brand","Container","Boolean","window","location","hostname","match","rootReducer","combineReducers","action","_","Object","assign","persistedState","serializedState","localStorage","getItem","JSON","parse","loadState","store","createStore","subscribe","stringify","setItem","saveState","getState","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.473dacfe.chunk.js","sourcesContent":["export const ADD_ITEM = \"ADD_ITEM\";\nexport const REMOVE_ITEM= \"REMOVE_ITEM \";\nexport const TOGGLE_ITEM = \"TOGGLE_ITEM\";\nexport const SET_VISIBILITY_FILTER = \"SET_VISIBILITY_FILTER\";\n\n\nexport const VisibilityFilters = {\n  SHOW_ALL: \"SHOW_ALL\",\n  SHOW_COMPLETED: \"SHOW_COMPLETED\",\n  SHOW_ACTIVE: \"SHOW_ACTIVE\"\n}\n\n\nlet nextItemId = 0\nexport function addItem(text) {\n  return {\n    type: ADD_ITEM,\n    id: nextItemId++,\n    text\n  }\n}\n\nexport function removeItem(id) {\n  return {\n    type: REMOVE_ITEM,\n    id\n  }\n}\n\nexport function toggleItem(id) {\n  return {\n    type: TOGGLE_ITEM,\n    id\n  }\n}\n\nexport function setVisibilityFilter(filter) {\n  return {\n    type: SET_VISIBILITY_FILTER,\n    filter\n  }\n}","import React from 'react';\nimport Card from 'react-bootstrap/Card';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\n\nimport { connect } from 'react-redux'\nimport { addItem } from './actions'\n\nclass Add extends React.Component {\n\n  render() {\n    let input\n    return (\n      <>\n        <Card className=\"mb-5 mt-2\">\n          <Card.Body>\n            <Form onSubmit={e => {\n              e.preventDefault()\n              if (!input.value.trim()) {\n                return\n              }\n              this.props.dispatch(addItem(input.value))\n              input.value = ''\n            }}\n            >\n              <input ref={node => { input = node }} />\n              <Button className=\"ml-5\" type=\"submit\">Add Item </Button>\n            </Form>\n          </Card.Body>\n        </Card>\n      </>\n    );\n  }\n}\n\nexport default connect() (Add);\n","import React from 'react';\nimport Nav from 'react-bootstrap/Nav'\n\nclass Link extends React.Component {\n\n  render() {\n    return (\n      <>\n        <Nav.Item>\n        <Nav.Link eventKey={this.props.children} onClick={this.props.onClick}\n          disabled={this.props.active}>\n          {this.props.children}\n        </Nav.Link>\n        </Nav.Item>\n      </>\n    );\n  }\n}\n\nexport default Link;","import { connect } from 'react-redux'\nimport { setVisibilityFilter } from './actions'\nimport Link from './Link'\n\nfunction mapStateToProps(state, ownProps) {\n  return {\n    active: ownProps.filter === state.visibilityFilter\n  }\n}\n\nfunction mapDispatchToProps(dispatch, ownProps) {\n  return {\n    onClick: () => {\n      dispatch(setVisibilityFilter(ownProps.filter))\n    }\n  }\n}\n\nconst LinkContainer = connect(mapStateToProps, mapDispatchToProps)(Link)\n\nexport default LinkContainer\n","import React from 'react';\nimport Nav from 'react-bootstrap/Nav'\nimport LinkContainer from './LinkContainer'\nimport { VisibilityFilters } from './actions'\n\nclass Links extends React.Component {\n\n  render() {\n    return (\n      <>\n        <Nav variant=\"tabs\" defaultActiveKey=\"All\">\n          <LinkContainer filter={VisibilityFilters.SHOW_ALL}>All</LinkContainer>\n          <LinkContainer filter={VisibilityFilters.SHOW_ACTIVE}>To Complete</LinkContainer>\n          <LinkContainer filter={VisibilityFilters.SHOW_COMPLETED}>Completed</LinkContainer>\n        </Nav>\n      </>\n    );\n  }\n}\n\nexport default Links;","\nimport React from \"react\"\nimport Button from 'react-bootstrap/Button'\n\nclass Item extends React.Component {\n\n  render() {\n    return (\n      <tr>\n      <td>\n        {this.props.id}\n      </td>\n\n      <td>\n        <span style={{\n          textDecoration: this.props.completed\n            ? 'line-through' : 'none'\n        }} onClick={this.props.onClick}>\n          {this.props.description}\n        </span>\n      </td>\n\n      <td>\n        <Button variant=\"danger\" onClick={this.props.removeClick}>remove</Button>\n      </td>\n\n    </tr>\n    )\n  }\n}\n\nexport default Item","import React from 'react';\nimport Table from 'react-bootstrap/Table'\nimport Item from './Item'\n\nclass VisibleItems extends React.Component {\n\n  render() {\n    return (\n      <>\n        <Table>\n          <thead>\n            <tr>\n              <th> ID</th>\n              <th>Item</th>\n              <th>Action</th>\n            </tr>\n          </thead>\n          <tbody>\n            {this.props.items.map((item) => (\n              <Item key={item.id} {...item}\n                onClick={() => this.props.onItemClick(item.id)}\n                removeClick={() => this.props.removeClick(item.id)} />\n            ))}\n          </tbody>\n        </Table>\n      </>\n    );\n  }\n}\n\nexport default VisibleItems;","import {connect} from 'react-redux'\nimport{toggleItem} from './actions'\nimport {removeItem} from './actions'\nimport VisibleItems from './VisibleItems'\n\n\nfunction getVisibleItems(items, filter) {\n  switch (filter) {\n    case 'SHOW_COMPLETED':\n      return items.filter(t => t.completed)\n    case 'SHOW_ACTIVE':\n      return items.filter(t =>!t.completed)\n    case 'SHOW_ALL':\n    default:\n      return items\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    items: getVisibleItems(state.items, state.visibilityFilter)\n  }\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    onItemClick: id => {\n      dispatch(toggleItem(id))\n    },\n    removeClick: id =>{\n      dispatch(removeItem(id))\n    }\n  }\n}\n\nconst VisibleItemList = connect(mapStateToProps, mapDispatchToProps)(VisibleItems)\n\nexport default VisibleItemList","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Container from 'react-bootstrap/Container';\nimport Add from './Add'\nimport Links from './Links'\nimport VisibleItemList from './VisibleItemList'\n\nclass App extends React.Component {\n  \n  render() {\n    return (\n      <>\n        <Navbar bg=\"info\" variant=\"dark\">\n          <Navbar.Brand>\n            React Shopping List\n          </Navbar.Brand>\n        </Navbar>\n        <Container>\n          <Add />\n          <Links />\n          <VisibleItemList />\n        </Container>\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\n  VisibilityFilters, \n  SET_VISIBILITY_FILTER, \n  ADD_ITEM, \n  REMOVE_ITEM, \n  TOGGLE_ITEM\n} from './actions'\n\nimport { combineReducers } from 'redux'\n\nfunction visibilityFilterReducer(state = VisibilityFilters.SHOW_ALL, action) {\n  switch (action.type) {\n    case SET_VISIBILITY_FILTER:\n      return action.filter\n    default:\n      return state\n  }\n}\n\nfunction itemReducer(state = [], action) {\n  switch (action.type) {\n    case ADD_ITEM:\n      return [\n        ...state,\n        {\n          id: action.id,\n          description: action.text,\n          completed: false\n        }\n      ]\n    case REMOVE_ITEM:\n      return state.filter((_, id) => action.id !== id)\n    case TOGGLE_ITEM:\n      return state.map((item) => {\n        if (item.id === action.id) {\n          return Object.assign({}, item, {\n            completed: !item.completed\n          })\n        }\n        return item\n      })\n    default:\n      return state\n  }\n}\n\nexport const rootReducer = combineReducers({\n  visibilityFilter: visibilityFilterReducer,\n  items: itemReducer,\n})","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux'\nimport { createStore } from \"redux\"\nimport { rootReducer } from './reducer'\n\nfunction loadState() {\n  const serializedState = localStorage.getItem('state');\n  if (!serializedState) {\n    return undefined;\n  }\n  return JSON.parse(serializedState);\n};\n\nconst persistedState = loadState();\nconst store = createStore(rootReducer, persistedState);\n\nfunction saveState(state) {\n\n  const serializedState = JSON.stringify(state);\n  localStorage.setItem('state', serializedState);\n} \n\nstore.subscribe(() => {\n  saveState(store.getState())\n})\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}